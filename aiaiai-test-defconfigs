#!/bin/sh -efu

# Copyright 2011-2012 Intel Corporation
# Author: Alexander Shishkin, Artem Bityutskiy
# License: GPLv2

srcdir="$(readlink -ev -- ${0%/*})"
PATH="$srcdir:$srcdir/external/libshell:$srcdir/external:$PATH"

. shell-error
. shell-args
. shell-signal
. aiaiai-sh-functions

PROG="${0##*/}"
message_time="yes"

show_usage()
{
	cat <<-EOF
Usage: $PROG [options] <kernel-tree>

<kernel-tree>          - directory with kernel sources

Test a patch-set for redundant defconfig changes. The mbox file containing the
patches to test is expected to come from stdin or -i option can be used
instead.

Options:
  -c, --commit-id=ID     the commit id to test against (default is the head of
                         the git tree (HEAD));
  -d, --dont-clone       work directly in <kernel-tree>, do not clone a
                         temporary copy of <kernel-tree>;
  -i, --input=MBOX       use the MBOX file instead of stdin;
  -w, --workdir=WDIR     path to the working directory  (default: a temporary
                         directory is created using mktemp);
  -p, --preserve         preserve all the temporary files - do not clean up;
  -v, --verbose          be verbose;
  -h, --help             show this text and exit.
EOF
}

fail_usage()
{
	[ -z "$1" ] || printf "%s\n" "$1"
	show_usage
	exit 1
}

check() {
	local config="$1"; shift
	local arch="$1"; shift
	local output="$1"; shift
	local config_file="$cloned_kernel/arch/$arch/configs/$config"

	verbose "Checking \"$config\""
	touch "$output"
	# The defconfig file may not exist at all, so do not fail
	make -C "$cloned_kernel" ARCH="$arch" "$config" > /dev/null 2>&1 &&
		make -C "$cloned_kernel" ARCH="$arch" savedefconfig > /dev/null 2>&1 &&
		diffconfig -m "$cloned_kernel/defconfig" "$config_file" > "$output" ||
		verbose "Failed to check \"$config\""
}

tmpdir=
preserve=
cleanup_handler()
{
	if [ -n "$preserve" ]; then
		message "Preserved tmpdir: $tmpdir"
	else
		[ -z "$tmpdir" ] || verbose "Removing $tmpdir";
		rm -rf -- "$tmpdir" >&2
	fi
}

set_cleanup_handler cleanup_handler

TEMP=`getopt -n $PROG -o c:,d,i:,w:,p,v,h --long commit-id:,dont-clone,input:,workdir:,preserve,verbose,help -- "$@"` ||
	fail_usage ""
eval set -- "$TEMP"

commit_id=HEAD
dont_clone=
mbox=
verbose=
quiet="-q"

while true; do
	case "$1" in
	-c|--commit-id)
		commit_id="$2"
		shift
		;;
	-d|--dont-clone)
		dont_clone="--dont-clone"
		;;
	-i|--input)
		mbox="$(opt_check_read "$1" "$2")"
		shift
		;;
	-w|--workdir)
		mkdir $verbose -p -- "$2" >&2
		tmpdir="$(mktemp --tmpdir="$(readlink -fv -- "$2")" -dt "$PROG.XXXX")"
		shift
		;;
	-p|--preserve)
		preserve="--preserve"
		;;
	-v|--verbose)
		verbose=-v
		quiet=
		;;
	-h|--help)
		show_usage
		exit 0
		;;
	--) shift; break
                ;;
	*) fail_usage "Unrecognized option: $1"
		;;
	esac
	shift
done

[ "$#" -eq 1 ] || fatal 'Please, specify exactly one argument - the kernel tree'
kernel_tree="$(readlink -ev -- "$1")"; shift
[ -n "$tmpdir" ] || tmpdir="$(mktemp -dt "$PROG.XXXX")"

# Save the mbox to a temporary file if it comes from stdin
if [ -z "$mbox" ]; then
	mbox="$tmpdir/mbox"
	cat > "$mbox"
fi

# Look for defconfig changes in the patchset and transform them to the
# following form:
#   <defconfig1>,<arch1>
#   <defconfig2>,<arch2>
confdir="arch\/\([^/]\+\)\/configs"
defconfigs=$(grep "+++ [^/]\+/arch\/[^/]\+\/configs/" "$mbox" | \
	sed -e "s/+++ [^/]\+\/$confdir\/\(.*\)/\2,\1/" | sort -u)
if [ -z "$defconfigs" ]; then
	verbose "No defconfig changes found in this patchset"
	exit 0
fi

verbose "The following defconfigs will be checked:"
verbose "$defconfigs"

if [ -z "$dont_clone" ]; then
	cloned_kernel="$tmpdir/src"
	git clone "${verbose:--q}" "$kernel_tree" "$cloned_kernel" >&2
else
	cloned_kernel="$kernel_tree"
fi

cd "$cloned_kernel"

commit_id="$(git --git-dir="$kernel_tree/.git" rev-parse "$commit_id^{commit}")"
git reset $quiet --hard "$commit_id" >&2

# Apply the patch
apply_patch < "$mbox" || exit 0

commit_id2="$(git rev-parse "HEAD^{commit}")"

difflog="$tmpdir/defconfigs.log.diff"

for defconfig in $defconfigs; do
	config="$(leave_first "$defconfig")"
	arch="$(strip_first "$defconfig")";
	check "$config" "$arch" "$tmpdir/correct-${defconfig##*/}"
done

git reset $quiet --hard "$commit_id" >&2

for defconfig in $defconfigs; do
	config="$(leave_first "$defconfig")"
	arch="$(strip_first "$defconfig")";
	check "$config" "$arch" "$tmpdir/patched-${defconfig##*/}"
	diff --label "patched-${defconfig##*/}" \
	     --label "correct-${defconfig##*/}" -U0 \
		"$tmpdir/patched-${defconfig##*/}" \
		"$tmpdir/correct-${defconfig##*/}" >> "$difflog" ||:
done

if [ -s "$difflog" ]; then
	cat <<EOF
The patch touches defconfig(s), but adds redundant lines. Below is a diff
against the correct defconfig version(s):

$(cat $difflog)

Linux kernel defconfig files should be minimalistic instead. Please,
use the following command in the kernel source tree to generate a
proper defconfig from your current .config file:

$ make savedefconfig

This command will create a "defconfig" file for you, which will be
your minimalistic defconfig file. Then move it to the defconfigs
directory and commit/create a patch.
EOF
fi
